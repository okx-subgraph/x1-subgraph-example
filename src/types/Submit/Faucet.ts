// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreateToken extends ethereum.Event {
  get params(): CreateToken__Params {
    return new CreateToken__Params(this);
  }
}

export class CreateToken__Params {
  _event: CreateToken;

  constructor(event: CreateToken) {
    this._event = event;
  }

  get tokenID(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[3].value.toString();
  }

  get decimals(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SendToken extends ethereum.Event {
  get params(): SendToken__Params {
    return new SendToken__Params(this);
  }
}

export class SendToken__Params {
  _event: SendToken;

  constructor(event: SendToken) {
    this._event = event;
  }

  get orderID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenID(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get sendID(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get OKBBalance(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get transferCounts(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get success(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get errMsg(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }
}

export class SetOKBThreshold extends ethereum.Event {
  get params(): SetOKBThreshold__Params {
    return new SetOKBThreshold__Params(this);
  }
}

export class SetOKBThreshold__Params {
  _event: SetOKBThreshold;

  constructor(event: SetOKBThreshold) {
    this._event = event;
  }

  get threshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetSendLimit extends ethereum.Event {
  get params(): SetSendLimit__Params {
    return new SetSendLimit__Params(this);
  }
}

export class SetSendLimit__Params {
  _event: SetSendLimit;

  constructor(event: SetSendLimit) {
    this._event = event;
  }

  get tokenID(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get sendID(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SetSender extends ethereum.Event {
  get params(): SetSender__Params {
    return new SetSender__Params(this);
  }
}

export class SetSender__Params {
  _event: SetSender;

  constructor(event: SetSender) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get enable(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class WithdrawOKB extends ethereum.Event {
  get params(): WithdrawOKB__Params {
    return new WithdrawOKB__Params(this);
  }
}

export class WithdrawOKB__Params {
  _event: WithdrawOKB;

  constructor(event: WithdrawOKB) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Faucet__getMultiInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Faucet__getSendLimitResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Faucet__getSendRecordResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Faucet__getTokenInfoResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: i32;

  constructor(value0: Address, value1: string, value2: string, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    return map;
  }
}

export class Faucet__getUserSendRecordResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Faucet__validateRequestResult {
  value0: boolean;
  value1: string;

  constructor(value0: boolean, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }
}

export class Faucet__validateRequestInputOrderStruct extends ethereum.Tuple {
  get orderID(): BigInt {
    return this[0].toBigInt();
  }

  get tokenID(): i32 {
    return this[1].toI32();
  }

  get sendID(): i32 {
    return this[2].toI32();
  }

  get receiver(): Address {
    return this[3].toAddress();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }
}

export class Faucet extends ethereum.SmartContract {
  static bind(address: Address): Faucet {
    return new Faucet("Faucet", address);
  }

  OKBBalance(): BigInt {
    let result = super.call("OKBBalance", "OKBBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_OKBBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("OKBBalance", "OKBBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OKBThreshold(): BigInt {
    let result = super.call("OKBThreshold", "OKBThreshold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_OKBThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("OKBThreshold", "OKBThreshold():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OKB_ADDRESS(): Address {
    let result = super.call("OKB_ADDRESS", "OKB_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_OKB_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall("OKB_ADDRESS", "OKB_ADDRESS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  blockHeight(): BigInt {
    let result = super.call("blockHeight", "blockHeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_blockHeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("blockHeight", "blockHeight():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createTestToken(name: string, symbol: string, decimals: i32): i32 {
    let result = super.call(
      "createTestToken",
      "createTestToken(string,string,uint8):(uint8)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals))
      ]
    );

    return result[0].toI32();
  }

  try_createTestToken(
    name: string,
    symbol: string,
    decimals: i32
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "createTestToken",
      "createTestToken(string,string,uint8):(uint8)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getMultiInfo(): Faucet__getMultiInfoResult {
    let result = super.call(
      "getMultiInfo",
      "getMultiInfo():(uint256,uint256,uint256)",
      []
    );

    return new Faucet__getMultiInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getMultiInfo(): ethereum.CallResult<Faucet__getMultiInfoResult> {
    let result = super.tryCall(
      "getMultiInfo",
      "getMultiInfo():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Faucet__getMultiInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getSendLimit(tokenID: i32, sendID: i32): Faucet__getSendLimitResult {
    let result = super.call(
      "getSendLimit",
      "getSendLimit(uint8,uint8):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(sendID))
      ]
    );

    return new Faucet__getSendLimitResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getSendLimit(
    tokenID: i32,
    sendID: i32
  ): ethereum.CallResult<Faucet__getSendLimitResult> {
    let result = super.tryCall(
      "getSendLimit",
      "getSendLimit(uint8,uint8):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(sendID))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Faucet__getSendLimitResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getSendRecord(tokenID: i32): Faucet__getSendRecordResult {
    let result = super.call(
      "getSendRecord",
      "getSendRecord(uint8):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID))]
    );

    return new Faucet__getSendRecordResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getSendRecord(
    tokenID: i32
  ): ethereum.CallResult<Faucet__getSendRecordResult> {
    let result = super.tryCall(
      "getSendRecord",
      "getSendRecord(uint8):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Faucet__getSendRecordResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getTokenInfo(tokenID: i32): Faucet__getTokenInfoResult {
    let result = super.call(
      "getTokenInfo",
      "getTokenInfo(uint8):(address,string,string,uint8)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID))]
    );

    return new Faucet__getTokenInfoResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toI32()
    );
  }

  try_getTokenInfo(
    tokenID: i32
  ): ethereum.CallResult<Faucet__getTokenInfoResult> {
    let result = super.tryCall(
      "getTokenInfo",
      "getTokenInfo(uint8):(address,string,string,uint8)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Faucet__getTokenInfoResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toI32()
      )
    );
  }

  getUserSendRecord(
    tokenID: i32,
    user: Address
  ): Faucet__getUserSendRecordResult {
    let result = super.call(
      "getUserSendRecord",
      "getUserSendRecord(uint8,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID)),
        ethereum.Value.fromAddress(user)
      ]
    );

    return new Faucet__getUserSendRecordResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUserSendRecord(
    tokenID: i32,
    user: Address
  ): ethereum.CallResult<Faucet__getUserSendRecordResult> {
    let result = super.tryCall(
      "getUserSendRecord",
      "getUserSendRecord(uint8,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID)),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Faucet__getUserSendRecordResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  isOrderProcessed(param0: BigInt): boolean {
    let result = super.call(
      "isOrderProcessed",
      "isOrderProcessed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_isOrderProcessed(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOrderProcessed",
      "isOrderProcessed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSender(param0: Address): boolean {
    let result = super.call("isSender", "isSender(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isSender(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSender", "isSender(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nextAvaliableTime(param0: Address, param1: i32): BigInt {
    let result = super.call(
      "nextAvaliableTime",
      "nextAvaliableTime(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1))
      ]
    );

    return result[0].toBigInt();
  }

  try_nextAvaliableTime(
    param0: Address,
    param1: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextAvaliableTime",
      "nextAvaliableTime(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenCounts(): i32 {
    let result = super.call("tokenCounts", "tokenCounts():(uint8)", []);

    return result[0].toI32();
  }

  try_tokenCounts(): ethereum.CallResult<i32> {
    let result = super.tryCall("tokenCounts", "tokenCounts():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  totalSendCounts(): BigInt {
    let result = super.call(
      "totalSendCounts",
      "totalSendCounts():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSendCounts(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSendCounts",
      "totalSendCounts():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validateRequest(
    order: Faucet__validateRequestInputOrderStruct
  ): Faucet__validateRequestResult {
    let result = super.call(
      "validateRequest",
      "validateRequest((uint256,uint8,uint8,address,uint256)):(bool,string)",
      [ethereum.Value.fromTuple(order)]
    );

    return new Faucet__validateRequestResult(
      result[0].toBoolean(),
      result[1].toString()
    );
  }

  try_validateRequest(
    order: Faucet__validateRequestInputOrderStruct
  ): ethereum.CallResult<Faucet__validateRequestResult> {
    let result = super.tryCall(
      "validateRequest",
      "validateRequest((uint256,uint8,uint8,address,uint256)):(bool,string)",
      [ethereum.Value.fromTuple(order)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Faucet__validateRequestResult(
        value[0].toBoolean(),
        value[1].toString()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateTestTokenCall extends ethereum.Call {
  get inputs(): CreateTestTokenCall__Inputs {
    return new CreateTestTokenCall__Inputs(this);
  }

  get outputs(): CreateTestTokenCall__Outputs {
    return new CreateTestTokenCall__Outputs(this);
  }
}

export class CreateTestTokenCall__Inputs {
  _call: CreateTestTokenCall;

  constructor(call: CreateTestTokenCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get decimals(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class CreateTestTokenCall__Outputs {
  _call: CreateTestTokenCall;

  constructor(call: CreateTestTokenCall) {
    this._call = call;
  }

  get tokenID(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SendBatchTokenCall extends ethereum.Call {
  get inputs(): SendBatchTokenCall__Inputs {
    return new SendBatchTokenCall__Inputs(this);
  }

  get outputs(): SendBatchTokenCall__Outputs {
    return new SendBatchTokenCall__Outputs(this);
  }
}

export class SendBatchTokenCall__Inputs {
  _call: SendBatchTokenCall;

  constructor(call: SendBatchTokenCall) {
    this._call = call;
  }

  get orders(): Array<SendBatchTokenCallOrdersStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SendBatchTokenCallOrdersStruct
    >();
  }
}

export class SendBatchTokenCall__Outputs {
  _call: SendBatchTokenCall;

  constructor(call: SendBatchTokenCall) {
    this._call = call;
  }
}

export class SendBatchTokenCallOrdersStruct extends ethereum.Tuple {
  get orderID(): BigInt {
    return this[0].toBigInt();
  }

  get tokenID(): i32 {
    return this[1].toI32();
  }

  get sendID(): i32 {
    return this[2].toI32();
  }

  get receiver(): Address {
    return this[3].toAddress();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }
}

export class SendTokenCall extends ethereum.Call {
  get inputs(): SendTokenCall__Inputs {
    return new SendTokenCall__Inputs(this);
  }

  get outputs(): SendTokenCall__Outputs {
    return new SendTokenCall__Outputs(this);
  }
}

export class SendTokenCall__Inputs {
  _call: SendTokenCall;

  constructor(call: SendTokenCall) {
    this._call = call;
  }

  get orderID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenID(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get sendID(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get receiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SendTokenCall__Outputs {
  _call: SendTokenCall;

  constructor(call: SendTokenCall) {
    this._call = call;
  }
}

export class SetBatchSenderCall extends ethereum.Call {
  get inputs(): SetBatchSenderCall__Inputs {
    return new SetBatchSenderCall__Inputs(this);
  }

  get outputs(): SetBatchSenderCall__Outputs {
    return new SetBatchSenderCall__Outputs(this);
  }
}

export class SetBatchSenderCall__Inputs {
  _call: SetBatchSenderCall;

  constructor(call: SetBatchSenderCall) {
    this._call = call;
  }

  get senders(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get enable(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetBatchSenderCall__Outputs {
  _call: SetBatchSenderCall;

  constructor(call: SetBatchSenderCall) {
    this._call = call;
  }
}

export class SetLimitCall extends ethereum.Call {
  get inputs(): SetLimitCall__Inputs {
    return new SetLimitCall__Inputs(this);
  }

  get outputs(): SetLimitCall__Outputs {
    return new SetLimitCall__Outputs(this);
  }
}

export class SetLimitCall__Inputs {
  _call: SetLimitCall;

  constructor(call: SetLimitCall) {
    this._call = call;
  }

  get tokenID(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get sendID(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetLimitCall__Outputs {
  _call: SetLimitCall;

  constructor(call: SetLimitCall) {
    this._call = call;
  }
}

export class SetOKBThresholdCall extends ethereum.Call {
  get inputs(): SetOKBThresholdCall__Inputs {
    return new SetOKBThresholdCall__Inputs(this);
  }

  get outputs(): SetOKBThresholdCall__Outputs {
    return new SetOKBThresholdCall__Outputs(this);
  }
}

export class SetOKBThresholdCall__Inputs {
  _call: SetOKBThresholdCall;

  constructor(call: SetOKBThresholdCall) {
    this._call = call;
  }

  get threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOKBThresholdCall__Outputs {
  _call: SetOKBThresholdCall;

  constructor(call: SetOKBThresholdCall) {
    this._call = call;
  }
}

export class SetSenderCall extends ethereum.Call {
  get inputs(): SetSenderCall__Inputs {
    return new SetSenderCall__Inputs(this);
  }

  get outputs(): SetSenderCall__Outputs {
    return new SetSenderCall__Outputs(this);
  }
}

export class SetSenderCall__Inputs {
  _call: SetSenderCall;

  constructor(call: SetSenderCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get enable(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetSenderCall__Outputs {
  _call: SetSenderCall;

  constructor(call: SetSenderCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawOKBCall extends ethereum.Call {
  get inputs(): WithdrawOKBCall__Inputs {
    return new WithdrawOKBCall__Inputs(this);
  }

  get outputs(): WithdrawOKBCall__Outputs {
    return new WithdrawOKBCall__Outputs(this);
  }
}

export class WithdrawOKBCall__Inputs {
  _call: WithdrawOKBCall;

  constructor(call: WithdrawOKBCall) {
    this._call = call;
  }
}

export class WithdrawOKBCall__Outputs {
  _call: WithdrawOKBCall;

  constructor(call: WithdrawOKBCall) {
    this._call = call;
  }
}
